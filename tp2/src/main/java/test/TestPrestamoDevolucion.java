package test;

import modelo.CategoriaRecurso;
import modelo.Prestamo;
import modelo.Usuario;
import recurso.Audiolibro;
import recurso.Libro;
import recurso.Revista;
import servicio.logica.GestorPrestamos;
import servicio.logica.GestorRecursos;
import servicio.notificacion.NotificacionConsola;
import servicio.notificacion.ServicioNotificaciones;
import servicio.notificacion.ServicioNotificacionesEmail;
import excepciones.RecursoNoDisponibleException;

import java.util.List;

/**
 * Test para el sistema de pr√©stamos y devoluciones que prueba diferentes escenarios,
 * tipos de recursos, y manejo de errores.
 */
public class TestPrestamoDevolucion {
    public static void main(String[] args) {
        System.out.println("\nüîç TEST: Sistema de Pr√©stamos y Devoluciones");
        System.out.println("=========================================");

        // Crear gestores y servicios
        ServicioNotificacionesEmail servicioEmail = new ServicioNotificacionesEmail();
        GestorRecursos gestorRecursos = new GestorRecursos(servicioEmail);
        GestorPrestamos gestorPrestamos = new GestorPrestamos();

        // Crear usuarios para pruebas
        Usuario ana = new Usuario("U1", "Ana", "ana@mail.com");
        Usuario pedro = new Usuario("U2", "Pedro", "pedro@mail.com");
        Usuario maria = new Usuario("U3", "Mar√≠a", "maria@mail.com");

        // Crear diferentes tipos de recursos
        System.out.println("\nüìö Creando recursos para pruebas...");
        Libro libro1 = new Libro("L1", "1984", "George Orwell", "978-0451524935", CategoriaRecurso.LITERATURA);
        Libro libro2 = new Libro("L2", "Cien A√±os de Soledad", "Gabriel Garc√≠a M√°rquez", "978-0307474728", CategoriaRecurso.LITERATURA);
        Revista revista1 = new Revista("R1", "National Geographic", 202, CategoriaRecurso.CIENCIA);
        Audiolibro audio1 = new Audiolibro("A1", "El Principito", "Antonio de Valdivia", CategoriaRecurso.FICCION);

        // Registrar recursos
        gestorRecursos.registrarRecurso(libro1);
        gestorRecursos.registrarRecurso(libro2);
        gestorRecursos.registrarRecurso(revista1);
        gestorRecursos.registrarRecurso(audio1);

        // Prueba 1: Pr√©stamo y devoluci√≥n b√°sicos
        System.out.println("\nüß™ Prueba 1: Pr√©stamo y devoluci√≥n b√°sicos");
        try {
            // Prestar libro a Ana
            System.out.println("üì§ Prestando '1984' a Ana...");
            gestorPrestamos.registrarPrestamo(ana, libro1);

            // Verificar pr√©stamos activos
            System.out.println("üìã Pr√©stamos activos despu√©s de prestar:");
            gestorPrestamos.listarPrestamos();

            // Devolver libro
            System.out.println("üì• Devolviendo '1984'...");
            gestorRecursos.devolver("L1");

            // Verificar pr√©stamos activos despu√©s de devoluci√≥n
            System.out.println("üìã Pr√©stamos activos despu√©s de devolver:");
            gestorPrestamos.listarPrestamos();

        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚ùå Error en Prueba 1: " + e.getMessage());
        }

        // Prueba 2: Pr√©stamo, renovaci√≥n y devoluci√≥n
        System.out.println("\nüß™ Prueba 2: Pr√©stamo, renovaci√≥n y devoluci√≥n");
        try {
            // Prestar revista a Pedro
            System.out.println("üì§ Prestando 'National Geographic' a Pedro...");
            gestorPrestamos.registrarPrestamo(pedro, revista1);

            // Obtener lista de pr√©stamos
            List<Prestamo> prestamos = gestorPrestamos.getPrestamos();

            // Verificar pr√©stamos antes de renovar
            System.out.println("üìã Pr√©stamo antes de renovar:");
            for (Prestamo p : prestamos) {
                if (p.getRecurso().equals(revista1)) {
                    System.out.println(p + " - Fecha fin: " + p.getFechaFin());
                }
            }

            // Renovar pr√©stamo
            System.out.println("üîÑ Renovando pr√©stamo por 14 d√≠as...");
            for (Prestamo p : prestamos) {
                if (p.getRecurso().equals(revista1)) {
                    gestorPrestamos.renovarPrestamo(p, 14);
                }
            }

            // Verificar pr√©stamos despu√©s de renovar
            System.out.println("üìã Pr√©stamo despu√©s de renovar:");
            for (Prestamo p : prestamos) {
                if (p.getRecurso().equals(revista1)) {
                    System.out.println(p + " - Fecha fin: " + p.getFechaFin());
                }
            }

            // Devolver revista
            System.out.println("üì• Devolviendo 'National Geographic'...");
            gestorRecursos.devolver("R1");

        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚ùå Error en Prueba 2: " + e.getMessage());
        }

        // Prueba 3: Pr√©stamos m√∫ltiples
        System.out.println("\nüß™ Prueba 3: Pr√©stamos m√∫ltiples");
        try {
            // Prestar varios recursos a Mar√≠a
            System.out.println("üì§ Prestando 'Cien A√±os de Soledad' a Mar√≠a...");
            gestorPrestamos.registrarPrestamo(maria, libro2);

            System.out.println("üì§ Prestando 'El Principito' a Mar√≠a...");
            gestorPrestamos.registrarPrestamo(maria, audio1);

            // Verificar pr√©stamos activos
            System.out.println("üìã Pr√©stamos activos de Mar√≠a:");
            List<Prestamo> prestamosMaria = gestorPrestamos.getPrestamos().stream()
                    .filter(p -> p.getUsuario().equals(maria))
                    .toList();

            for (Prestamo p : prestamosMaria) {
                System.out.println(p);
            }

            // Devolver recursos
            System.out.println("üì• Devolviendo 'Cien A√±os de Soledad'...");
            gestorRecursos.devolver("L2");

            System.out.println("üì• Devolviendo 'El Principito'...");
            gestorRecursos.devolver("A1");

        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚ùå Error en Prueba 3: " + e.getMessage());
        }

        // Prueba 4: Manejo de errores
        System.out.println("\nüß™ Prueba 4: Manejo de errores");

        // Caso 1: Intentar prestar un recurso que no existe
        try {
            System.out.println("‚ùì Intentando prestar un recurso inexistente...");
            gestorPrestamos.registrarPrestamo(ana, null);
        } catch (Exception e) {
            System.out.println("‚úÖ Error capturado correctamente: " + e.getMessage());
        }

        // Caso 2: Intentar prestar un recurso ya prestado
        try {
            System.out.println("‚ùì Intentando prestar un recurso ya prestado...");
            // Primero prestamos el libro a Ana
            gestorPrestamos.registrarPrestamo(ana, libro1);
            // Luego intentamos prestarlo a Pedro
            gestorPrestamos.registrarPrestamo(pedro, libro1);
        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚úÖ Error capturado correctamente: " + e.getMessage());
        }

        // Caso 3: Intentar devolver un recurso que no est√° prestado
        try {
            System.out.println("‚ùì Intentando devolver un recurso que no est√° prestado...");
            // Primero devolvemos el libro
            gestorRecursos.devolver("L1");
            // Luego intentamos devolverlo de nuevo
            gestorRecursos.devolver("L1");
        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚úÖ Error capturado correctamente: " + e.getMessage());
        }

        // Cerrar servicios
        servicioEmail.cerrar();

        System.out.println("\n‚úÖ TestPrestamoDevolucion ejecutado con √©xito.");
    }
}
