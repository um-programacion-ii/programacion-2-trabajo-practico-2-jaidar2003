package app;

import modelo.PreferenciasNotificacion;
import modelo.Recordatorio;
import modelo.Usuario;
import modelo.CategoriaRecurso;
import recurso.*;
import servicio.logica.GestorPrestamos;
import servicio.logica.GestorRecursos;
import servicio.logica.GestorReportes;
import servicio.logica.GestorReservas;
import servicio.logica.GestorUsuarios;
import servicio.logica.GestorRecordatorios;
import servicio.notificacion.ServicioNotificacionesEmail;
import excepciones.RecursoNoDisponibleException;

import java.util.Map;
import java.util.Scanner;
import java.util.UUID;
import java.util.concurrent.Future;

public class MenuConsola {
    private static final Scanner scanner = new Scanner(System.in);
    private static final ServicioNotificacionesEmail servicioNotificaciones = new ServicioNotificacionesEmail();
    private static final GestorUsuarios gestorUsuarios = new GestorUsuarios();
    private static final GestorPrestamos gestorPrestamos = new GestorPrestamos();
    private static final GestorReservas gestorReservas = new GestorReservas(gestorPrestamos);
    private static final GestorRecursos gestorRecursos = new GestorRecursos(servicioNotificaciones);
    private static final GestorRecordatorios sistemaRecordatorios = new GestorRecordatorios();
    private static final GestorReportes gestorReportes = new GestorReportes(gestorPrestamos.getPrestamos());

    static {
        // Configurar el servicio de notificaciones para GestorReservas
        gestorReservas.setServicioNotificaciones(new servicio.notificacion.ServicioNotificacionesEmailAdapter(servicioNotificaciones));
    }

    public static void main(String[] args) {
        int opcion;

        do {
            mostrarMenu();
            opcion = scanner.nextInt();
            scanner.nextLine(); // limpiar buffer

            switch (opcion) {
                case 1 -> registrarUsuario();
                case 2 -> listarUsuarios();
                case 3 -> registrarRecurso();
                case 4 -> listarRecursos();
                case 5 -> prestarRecurso();
                case 6 -> devolverRecurso();
                case 7 -> renovarRecurso();
                case 8 -> accederOnline();
                case 9 -> descargarRecurso();
                case 10 -> buscarPorCategoria();
                case 11 -> crearRecordatorio();
                case 12 -> verHistorialRecordatorios();
                case 13 -> verRecordatoriosPorUsuario();
                case 14 -> configurarPreferenciasNotificacion();
                case 15 -> verificarVencimientosPrestamos();
                case 16 -> procesarAlertasDisponibilidad();
                case 17 -> generarReportesSincronos();
                case 18 -> generarReportesConcurrentes();
                case 19 -> verEstadoReportes();
                case 20 -> verResultadosReportes();
                case 0 -> {
                    System.out.println("üëã ¬°Hasta luego!");
                    servicioNotificaciones.cerrar();  // Cerramos el ExecutorService
                    sistemaRecordatorios.cerrar();    // Cerramos el sistema de recordatorios
                    gestorReportes.cerrar();          // Cerramos el servicio de reportes
                }
                default -> System.out.println("‚ùå Opci√≥n inv√°lida.");
            }
        } while (opcion != 0);
    }

    private static void mostrarMenu() {
        System.out.println("""
            üìö Sistema de Gesti√≥n de Biblioteca

            1) Registrar usuario
            2) Listar usuarios
            3) Registrar recurso
            4) Listar recursos
            5) Prestar recurso
            6) Devolver recurso
            7) Renovar recurso
            8) Acceder en l√≠nea a recurso digital
            9) Descargar recurso digital
            10) Buscar recursos por categor√≠a
            11) Crear recordatorio
            12) Ver historial de recordatorios
            13) Ver recordatorios por usuario
            14) Configurar preferencias de notificaci√≥n
            15) Verificar vencimientos de pr√©stamos
            16) Procesar alertas de disponibilidad

            üìä Reportes:
            17) Generar reportes (s√≠ncrono)
            18) Generar reportes concurrentes
            19) Ver estado de reportes
            20) Ver resultados de reportes

            0) Salir
            """);
        System.out.print("Seleccione una opci√≥n: ");
    }

    private static void registrarUsuario() {
        System.out.print("Ingrese ID: ");
        String id = scanner.nextLine();
        System.out.print("Ingrese nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Ingrese email: ");
        String email = scanner.nextLine();

        gestorUsuarios.registrarUsuario(new Usuario(id, nombre, email));
        System.out.println("‚úÖ Usuario registrado con √©xito.");
    }

    private static void listarUsuarios() {
        gestorUsuarios.listarUsuarios();
    }

    private static void registrarRecurso() {
        System.out.print("Tipo (libro/revista/audiolibro): ");
        String tipo = scanner.nextLine().toLowerCase();
        System.out.print("ID: ");
        String id = scanner.nextLine();
        System.out.print("T√≠tulo: ");
        String titulo = scanner.nextLine();

        System.out.print("Categor√≠a (FICCION, TECNICO, HISTORIA, CIENCIA): ");
        String categoriaStr = scanner.nextLine().toUpperCase();

        CategoriaRecurso categoria;
        try {
            categoria = CategoriaRecurso.valueOf(categoriaStr);
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Categor√≠a inv√°lida. Recurso no registrado.");
            return;
        }

        switch (tipo) {
            case "libro" -> {
                System.out.print("Autor: ");
                String autor = scanner.nextLine();
                System.out.print("ISBN: ");
                String isbn = scanner.nextLine();
                gestorRecursos.registrarRecurso(new Libro(id, titulo, autor, isbn, categoria));
            }
            case "revista" -> {
                System.out.print("N√∫mero de edici√≥n: ");
                int edicion = scanner.nextInt();
                scanner.nextLine();
                gestorRecursos.registrarRecurso(new Revista(id, titulo, edicion, categoria));
            }
            case "audiolibro" -> {
                System.out.print("Narrador: ");
                String narrador = scanner.nextLine();
                gestorRecursos.registrarRecurso(new Audiolibro(id, titulo, narrador, categoria));
            }
            default -> System.out.println("‚ùå Tipo de recurso no v√°lido.");
        }
    }

    private static void listarRecursos() {
        gestorRecursos.listarRecursos();
    }

    private static void prestarRecurso() {
        System.out.print("ID del recurso: ");
        String id = scanner.nextLine();
        try {
            gestorRecursos.prestar(id);
        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚ö†Ô∏è " + e.getMessage());
        }
    }

    private static void devolverRecurso() {
        System.out.print("ID del recurso: ");
        String id = scanner.nextLine();
        try {
            gestorRecursos.devolver(id);
        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚ö†Ô∏è " + e.getMessage());
        }
    }

    private static void renovarRecurso() {
        System.out.print("ID del recurso: ");
        String id = scanner.nextLine();
        try {
            gestorRecursos.renovar(id);
        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚ö†Ô∏è " + e.getMessage());
        }
    }

    private static void accederOnline() {
        System.out.print("ID del recurso digital: ");
        String id = scanner.nextLine();
        try {
            gestorRecursos.accederOnline(id);
        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚ö†Ô∏è " + e.getMessage());
        }
    }

    private static void descargarRecurso() {
        System.out.print("ID del recurso digital: ");
        String id = scanner.nextLine();
        try {
            gestorRecursos.descargar(id);
        } catch (RecursoNoDisponibleException e) {
            System.out.println("‚ö†Ô∏è " + e.getMessage());
        }
    }

    private static void buscarPorCategoria() {
        System.out.println("Categor√≠as disponibles:");
        for (CategoriaRecurso c : CategoriaRecurso.values()) {
            System.out.println("üìÅ " + c);
        }

        System.out.print("Ingrese categor√≠a a buscar: ");
        String input = scanner.nextLine().toUpperCase();

        try {
            CategoriaRecurso categoria = CategoriaRecurso.valueOf(input);
            var resultados = gestorRecursos.filtrarPorCategoria(categoria);
            gestorRecursos.mostrarLista(resultados);
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Categor√≠a inv√°lida.");
        }
    }

    private static void crearRecordatorio() {
        System.out.println("üìù Crear nuevo recordatorio");

        // Seleccionar usuario
        System.out.println("\nUsuarios disponibles:");
        gestorUsuarios.listarUsuarios();

        System.out.print("\nIngrese ID del usuario: ");
        String idUsuario = scanner.nextLine();
        Usuario usuario = gestorUsuarios.buscarUsuarioPorId(idUsuario);

        if (usuario == null) {
            System.out.println("‚ùå Usuario no encontrado.");
            return;
        }

        // Ingresar datos del recordatorio
        System.out.print("Asunto: ");
        String asunto = scanner.nextLine();

        System.out.print("Mensaje: ");
        String mensaje = scanner.nextLine();

        System.out.println("Nivel de urgencia (1: INFO, 2: WARNING, 3: ERROR): ");
        int nivelOpcion = scanner.nextInt();
        scanner.nextLine(); // Limpiar buffer

        Recordatorio.NivelUrgencia nivel;
        switch (nivelOpcion) {
            case 1 -> nivel = Recordatorio.NivelUrgencia.INFO;
            case 2 -> nivel = Recordatorio.NivelUrgencia.WARNING;
            case 3 -> nivel = Recordatorio.NivelUrgencia.ERROR;
            default -> {
                System.out.println("‚ùå Nivel inv√°lido. Se usar√° INFO por defecto.");
                nivel = Recordatorio.NivelUrgencia.INFO;
            }
        }

        // Crear recordatorio
        sistemaRecordatorios.crearRecordatorio(usuario, asunto, mensaje, nivel);
        System.out.println("‚úÖ Recordatorio creado con √©xito.");
    }

    private static void verHistorialRecordatorios() {
        System.out.println("üìã Historial de recordatorios");
        sistemaRecordatorios.mostrarHistorialRecordatorios();
    }

    private static void verRecordatoriosPorUsuario() {
        System.out.println("üìã Recordatorios por usuario");

        // Seleccionar usuario
        System.out.println("\nUsuarios disponibles:");
        gestorUsuarios.listarUsuarios();

        System.out.print("\nIngrese ID del usuario: ");
        String idUsuario = scanner.nextLine();
        Usuario usuario = gestorUsuarios.buscarUsuarioPorId(idUsuario);

        if (usuario == null) {
            System.out.println("‚ùå Usuario no encontrado.");
            return;
        }

        sistemaRecordatorios.mostrarRecordatoriosUsuario(usuario);
    }

    private static void configurarPreferenciasNotificacion() {
        System.out.println("‚öôÔ∏è Configurar preferencias de notificaci√≥n");

        // Seleccionar usuario
        System.out.println("\nUsuarios disponibles:");
        gestorUsuarios.listarUsuarios();

        System.out.print("\nIngrese ID del usuario: ");
        String idUsuario = scanner.nextLine();
        Usuario usuario = gestorUsuarios.buscarUsuarioPorId(idUsuario);

        if (usuario == null) {
            System.out.println("‚ùå Usuario no encontrado.");
            return;
        }

        System.out.println("Preferencias actuales: " + usuario.getPreferencias());

        // Configurar nuevas preferencias
        System.out.print("¬øRecibir notificaciones por email? (S/N): ");
        boolean recibirPorEmail = scanner.nextLine().toUpperCase().equals("S");

        System.out.print("¬øRecibir notificaciones por consola? (S/N): ");
        boolean recibirPorConsola = scanner.nextLine().toUpperCase().equals("S");

        System.out.print("¬øRecibir notificaciones de nivel INFO? (S/N): ");
        boolean recibirInfoLevel = scanner.nextLine().toUpperCase().equals("S");

        System.out.print("¬øRecibir notificaciones de nivel WARNING? (S/N): ");
        boolean recibirWarningLevel = scanner.nextLine().toUpperCase().equals("S");

        System.out.print("¬øRecibir notificaciones de nivel ERROR? (S/N): ");
        boolean recibirErrorLevel = scanner.nextLine().toUpperCase().equals("S");

        // Crear y asignar nuevas preferencias
        PreferenciasNotificacion preferencias = new PreferenciasNotificacion(
                recibirPorEmail, recibirPorConsola, recibirInfoLevel, recibirWarningLevel, recibirErrorLevel);

        usuario.setPreferencias(preferencias);
        System.out.println("‚úÖ Preferencias actualizadas con √©xito.");
        System.out.println("Nuevas preferencias: " + usuario.getPreferencias());
    }

    /**
     * Verifica los vencimientos de pr√©stamos y permite renovarlos.
     * Utiliza el m√©todo verificarVencimientos() de GestorPrestamos.
     */
    private static void verificarVencimientosPrestamos() {
        System.out.println("üîç Verificando vencimientos de pr√©stamos...");
        gestorPrestamos.verificarVencimientos();
    }

    /**
     * Procesa las alertas de disponibilidad de recursos reservados.
     * Utiliza el m√©todo procesarAlertasDisponibilidad() de GestorReservas.
     */
    private static void procesarAlertasDisponibilidad() {
        System.out.println("üîî Procesando alertas de disponibilidad...");
        gestorReservas.procesarAlertasDisponibilidad();
    }

    /**
     * Genera reportes de forma s√≠ncrona.
     * Utiliza el m√©todo mostrarTodosLosReportes() de GestorReportes.
     */
    private static void generarReportesSincronos() {
        System.out.println("üìä Generando reportes de forma s√≠ncrona...");
        gestorReportes.mostrarTodosLosReportes();
    }

    /**
     * Genera reportes de forma concurrente.
     * Utiliza los m√©todos de generaci√≥n as√≠ncrona de GestorReportes.
     */
    private static void generarReportesConcurrentes() {
        System.out.println("üìä Generando reportes de forma concurrente...");

        // Generar un ID √∫nico para cada reporte
        String idRecursos = "recursos-" + UUID.randomUUID().toString().substring(0, 8);
        String idUsuarios = "usuarios-" + UUID.randomUUID().toString().substring(0, 8);
        String idCategorias = "categorias-" + UUID.randomUUID().toString().substring(0, 8);

        // Generar reportes de forma as√≠ncrona
        System.out.println("‚è≥ Iniciando generaci√≥n de reportes en segundo plano...");

        Future<?> futuroRecursos = gestorReportes.generarReporteRecursosMasPrestadosAsync(idRecursos);
        Future<?> futuroUsuarios = gestorReportes.generarReporteUsuariosMasActivosAsync(idUsuarios);
        Future<?> futuroCategorias = gestorReportes.generarReporteEstadisticasPorCategoriaAsync(idCategorias);

        System.out.println("‚úÖ Reportes iniciados con √©xito. Puede consultar su estado con la opci√≥n 19.");
        System.out.println("üìù IDs de los reportes:");
        System.out.println("   - Recursos m√°s prestados: " + idRecursos);
        System.out.println("   - Usuarios m√°s activos: " + idUsuarios);
        System.out.println("   - Estad√≠sticas por categor√≠a: " + idCategorias);
    }

    /**
     * Muestra el estado actual de los reportes en proceso y finalizados.
     * Utiliza el m√©todo mostrarEstadoReportes() de GestorReportes.
     */
    private static void verEstadoReportes() {
        System.out.println("üîç Estado de los reportes:");
        gestorReportes.mostrarEstadoReportes();
    }

    /**
     * Permite ver los resultados de un reporte espec√≠fico.
     * Utiliza el m√©todo obtenerResultadoReporte() de GestorReportes.
     */
    private static void verResultadosReportes() {
        System.out.println("üìã Ver resultados de reportes");

        // Mostrar estado actual de reportes
        gestorReportes.mostrarEstadoReportes();

        // Solicitar ID del reporte a consultar
        System.out.print("\nIngrese el ID del reporte que desea ver: ");
        String reporteId = scanner.nextLine();

        // Obtener y mostrar el resultado
        String resultado = gestorReportes.obtenerResultadoReporte(reporteId);

        if (resultado != null) {
            System.out.println("\nüìä Resultado del reporte " + reporteId + ":");
            System.out.println(resultado);
        } else {
            System.out.println("‚ùå No se encontr√≥ un reporte con ese ID o a√∫n no ha finalizado.");
        }
    }
}
